/// <reference types="react" />
export declare const replace2Dashes: (key: string) => string;
export declare const getStyleValue: (key: string, value: string) => string;
export interface CustomCSSProperties extends React.CSSProperties {
    "&:hover"?: React.CSSProperties;
    "&:active"?: React.CSSProperties;
    "&:visited"?: React.CSSProperties;
    "&:focus"?: React.CSSProperties;
    "&:disabled"?: React.CSSProperties;
    dynamicStyle?: React.CSSProperties;
}
export interface StyleClasses {
    style?: CustomCSSProperties;
    className?: string;
}
export declare const extendsStyleKeys: any;
export declare class StyleManager {
    globalClassName: string;
    theme: ReactUWP.ThemeType;
    themeId: number;
    styleElement: HTMLStyleElement;
    sheets: {
        [key: string]: {
            CSSText?: string;
            className?: string;
            classNameWithHash?: string;
            id?: number;
        };
    };
    styleDidUpdate: () => void;
    CSSText: string;
    addedCSSText: {
        [key: string]: boolean;
    };
    constructor(config: {
        theme?: ReactUWP.ThemeType;
        globalClassName?: string;
        styleDidUpdate?: () => void;
    });
    setupTheme: (theme?: ReactUWP.ThemeType) => void;
    setupStyleElement: () => void;
    cleanStyleSheet: () => void;
    style2CSSText: (style: React.CSSProperties) => string;
    sheetsToString: () => string;
    addStyle: (style: CustomCSSProperties, className?: string, callback?: () => void) => {
        CSSText?: string;
        className?: string;
        classNameWithHash?: string;
        id?: number;
    };
    addStyleWithUpdate: (style: CustomCSSProperties, className?: string) => {
        CSSText?: string;
        className?: string;
        classNameWithHash?: string;
        id?: number;
    };
    addCSSText: (CSSText: string, callback?: (shouldUpdate?: boolean) => void) => void;
    addCSSTextWithUpdate: (CSSText: string) => void;
    setStyleToManager(config?: {
        style?: CustomCSSProperties;
        className?: string;
    }, callback?: (theme?: ReactUWP.ThemeType) => StyleClasses): StyleClasses;
    setStylesToManager(config?: {
        styles: {
            [key: string]: StyleClasses | CustomCSSProperties;
        };
        className?: string;
    }, callback?: (theme?: ReactUWP.ThemeType) => {
        [key: string]: StyleClasses;
    }): {
        [key: string]: StyleClasses;
    };
    renderSheets: () => void;
    updateStyleElement: (textContent: string) => void;
}
export default StyleManager;
