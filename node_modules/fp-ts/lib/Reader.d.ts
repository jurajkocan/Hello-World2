import { Monad, FantasyMonad } from './Monad';
import { Endomorphism } from './function';
export declare const URI = "Reader";
export declare type URI = typeof URI;
export declare class Reader<E, A> implements FantasyMonad<URI, A> {
    readonly run: (e: E) => A;
    readonly _L: E;
    readonly _A: A;
    readonly _URI: URI;
    constructor(run: (e: E) => A);
    map<B>(f: (a: A) => B): Reader<E, B>;
    ap<B>(fab: Reader<E, (a: A) => B>): Reader<E, B>;
    chain<B>(f: (a: A) => Reader<E, B>): Reader<E, B>;
}
export declare const map: <E, A, B>(f: (a: A) => B, fa: Reader<E, A>) => Reader<E, B>;
export declare const of: <E, A>(a: A) => Reader<E, A>;
export declare const ap: <E, A, B>(fab: Reader<E, (a: A) => B>, fa: Reader<E, A>) => Reader<E, B>;
export declare const chain: <E, A, B>(f: (a: A) => Reader<E, B>, fa: Reader<E, A>) => Reader<E, B>;
/** reads the current context */
export declare const ask: <E>() => Reader<E, E>;
/** Projects a value from the global context in a Reader */
export declare const asks: <E, A>(f: (e: E) => A) => Reader<E, A>;
/** changes the value of the local context during the execution of the action `fa` */
export declare const local: <E>(f: Endomorphism<E>) => <A>(fa: Reader<E, A>) => Reader<E, A>;
export declare const reader: Monad<URI>;
