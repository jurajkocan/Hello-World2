import { Semigroup } from './Semigroup';
import { Endomorphism } from './function';
export interface Monoid<A> extends Semigroup<A> {
    empty: () => A;
}
export declare const fold: <A>(M: Monoid<A>) => (as: A[]) => A;
export declare const getProductMonoid: <A, B>(MA: Monoid<A>, MB: Monoid<B>) => Monoid<[A, B]>;
export declare const getDualMonoid: <A>(M: Monoid<A>) => Monoid<A>;
/** Boolean monoid under conjunction */
export declare const monoidAll: Monoid<boolean>;
/** Boolean monoid under disjunction */
export declare const monoidAny: Monoid<boolean>;
/** Monoid under array concatenation (`Array<any>`) */
export declare const monoidArray: Monoid<Array<any>>;
/** Number monoid under addition */
export declare const monoidSum: Monoid<number>;
/** Number monoid under multiplication */
export declare const monoidProduct: Monoid<number>;
export declare const monoidString: Monoid<string>;
export declare const getFunctionMonoid: <M>(monoid: Monoid<M>) => <A>() => Monoid<(a: A) => M>;
export declare const getEndomorphismMonoid: <A>() => Monoid<Endomorphism<A>>;
/** Returns a monoid under array concatenation */
export declare const getArrayMonoid: <A>() => Monoid<A[]>;
export declare const getRecordMonoid: <O extends {
    [key: string]: any;
}>(monoids: {
    [K in keyof O]: Monoid<O[K]>;
}) => Monoid<{
    [K in keyof O]: O[K];
}>;
