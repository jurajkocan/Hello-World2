"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.not = function (predicate) { return function (a) { return !predicate(a); }; };
function or(p1) {
    return function (p2) { return function (a) { return p1(a) || p2(a); }; };
}
exports.or = or;
exports.and = function (p1, p2) { return function (a) { return p1(a) && p2(a); }; };
exports.constant = function (a) { return function () { return a; }; };
/** A thunk that returns always `true` */
exports.constTrue = exports.constant(true);
/** A thunk that returns always `false` */
exports.constFalse = exports.constant(false);
exports.identity = function (a) { return a; };
/** Flips the order of the arguments to a function of two arguments. */
exports.flip = function (f) { return function (b) { return function (a) { return f(a)(b); }; }; };
/** The `on` function is used to change the domain of a binary operator. */
exports.on = function (op) { return function (f) { return function (x) { return function (y) {
    return op(f(x))(f(y));
}; }; }; };
function compose() {
    var fns = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        fns[_i] = arguments[_i];
    }
    var len = fns.length - 1;
    return function (x) {
        var y = x;
        for (var i = len; i > -1; i--) {
            y = fns[i].call(this, y);
        }
        return y;
    };
}
exports.compose = compose;
function pipe() {
    var fns = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        fns[_i] = arguments[_i];
    }
    var len = fns.length - 1;
    return function (x) {
        var y = x;
        for (var i = 0; i <= len; i++) {
            y = fns[i].call(this, y);
        }
        return y;
    };
}
exports.pipe = pipe;
function curried(f, n, acc) {
    return function (x) {
        var combined = acc.concat([x]);
        return n === 0 ? f.apply(this, combined) : curried(f, n - 1, combined);
    };
}
function curry(f) {
    return curried(f, f.length - 1, []);
}
exports.curry = curry;
exports.toString = function (x) {
    if (typeof x === 'string') {
        return JSON.stringify(x);
    }
    if (x instanceof Date) {
        return "new Date('" + x.toISOString() + "')";
    }
    if (Array.isArray(x)) {
        return "[" + x.map(exports.toString).join(', ') + "]";
    }
    return String(x);
};
exports.tuple = function (a, b) { return [a, b]; };
exports.tupleCurried = function (a) { return function (b) { return [a, b]; }; };
/** Applies a function to an argument ($) */
exports.apply = function (f) { return function (a) { return f(a); }; };
/** Applies an argument to a function (#) */
exports.applyFlipped = function (a) { return function (f) { return f(a); }; };
//# sourceMappingURL=function.js.map