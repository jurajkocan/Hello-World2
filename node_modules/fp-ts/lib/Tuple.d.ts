import { HKT, HKTS, HKT2S, HKTAs, HKT2As } from './HKT';
import { Setoid } from './Setoid';
import { Ord } from './Ord';
import { Semigroup } from './Semigroup';
import { Monoid } from './Monoid';
import { Bifunctor, FantasyBifunctor } from './Bifunctor';
import { Comonad, FantasyComonad } from './Comonad';
import { Apply } from './Apply';
import { Monad } from './Monad';
import { Foldable, FantasyFoldable } from './Foldable';
import { Applicative } from './Applicative';
import { Traversable, FantasyTraversable } from './Traversable';
import { Semigroupoid, FantasySemigroupoid } from './Semigroupoid';
import { Cokleisli } from './function';
import { ChainRec } from './ChainRec';
import { Chain } from './Chain';
import { Either } from './Either';
declare module './HKT' {
    interface URI2HKT2<L, A> {
        Tuple: Tuple<L, A>;
    }
}
export declare const URI = "Tuple";
export declare type URI = typeof URI;
export declare class Tuple<L, A> implements FantasySemigroupoid<URI, L, A>, FantasyBifunctor<URI, L, A>, FantasyComonad<URI, A>, FantasyFoldable<A>, FantasyTraversable<URI, A> {
    readonly value: [L, A];
    readonly _A: A;
    readonly _L: L;
    readonly _URI: URI;
    constructor(value: [L, A]);
    fst(): L;
    snd(): A;
    compose<B>(ab: Tuple<A, B>): Tuple<L, B>;
    map<B>(f: (a: A) => B): Tuple<L, B>;
    bimap<M, B>(f: (l: L) => M, g: (a: A) => B): Tuple<M, B>;
    extract(): A;
    extend<B>(f: Cokleisli<URI, A, B>): Tuple<L, B>;
    reduce<B>(f: (c: B, b: A) => B, c: B): B;
    traverse<F>(F: Applicative<F>): <B>(f: (a: A) => HKT<F, B>) => HKT<F, Tuple<L, B>>;
    inspect(): string;
    toString(): string;
}
/** Returns the first component of a tuple. */
export declare const fst: <L, A>(fa: Tuple<L, A>) => L;
/** Returns the second component of a tuple. */
export declare const snd: <L, A>(fa: Tuple<L, A>) => A;
export declare const compose: <A, B>(bc: Tuple<A, B>) => <L>(fa: Tuple<L, A>) => Tuple<L, B>;
export declare const map: <L, A, B>(f: (b: A) => B, fa: Tuple<L, A>) => Tuple<L, B>;
export declare const bimap: <L, A, M, B>(f: (l: L) => M, g: (a: A) => B) => (fla: Tuple<L, A>) => Tuple<M, B>;
export declare const extract: <L, A>(fa: Tuple<L, A>) => A;
export declare const extend: <L, A, B>(f: Cokleisli<"Tuple", A, B>, fa: Tuple<L, A>) => Tuple<L, B>;
export declare const reduce: <L, A, B>(f: (c: B, b: A) => B, c: B, fa: Tuple<L, A>) => B;
export declare const getSetoid: <L, A>(SA: Setoid<L>, SB: Setoid<A>) => Setoid<Tuple<L, A>>;
/**
 * To obtain the result, the `fst`s are `compare`d, and if they are `EQ`ual, the
 * `snd`s are `compare`d.
 */
export declare const getOrd: <L, A>(OA: Ord<L>, OB: Ord<A>) => Ord<Tuple<L, A>>;
export declare const getSemigroup: <L, A>(SA: Semigroup<L>, SB: Semigroup<A>) => Semigroup<Tuple<L, A>>;
export declare const getMonoid: <L, A>(MA: Monoid<L>, MB: Monoid<A>) => Monoid<Tuple<L, A>>;
export declare const getApply: <L>(S: Semigroup<L>) => Apply<"Tuple">;
export declare const getApplicative: <L>(monoidA: Monoid<L>) => Applicative<"Tuple">;
export declare const getChain: <L>(M: Monoid<L>) => Chain<"Tuple">;
export declare const getMonad: <L>(M: Monoid<L>) => Monad<"Tuple">;
export declare const chainRec: <L>(M: Monoid<L>) => <A, B>(f: (a: A) => Tuple<L, Either<A, B>>, a: A) => Tuple<L, B>;
export declare const getChainRec: <L>(M: Monoid<L>) => ChainRec<"Tuple">;
export declare class Ops {
    traverse<F extends HKT2S>(F: Applicative<F>): <M, L, A, B>(f: (a: A) => HKT2As<F, M, B>, ta: Tuple<L, A>) => HKT2As<F, M, Tuple<L, B>>;
    traverse<F extends HKTS>(F: Applicative<F>): <L, A, B>(f: (a: A) => HKTAs<F, B>, ta: Tuple<L, A>) => HKTAs<F, Tuple<L, B>>;
    traverse<F>(F: Applicative<F>): <L, A, B>(f: (a: A) => HKT<F, B>, ta: Tuple<L, A>) => HKT<F, Tuple<L, B>>;
}
export declare const traverse: Ops['traverse'];
/** Exchange the first and second components of a tuple. */
export declare const swap: <L, A>(fa: Tuple<L, A>) => Tuple<A, L>;
export declare const tuple: Semigroupoid<URI> & Bifunctor<URI> & Comonad<URI> & Foldable<URI> & Traversable<URI>;
