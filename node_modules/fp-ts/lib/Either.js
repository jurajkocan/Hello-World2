"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var ChainRec_1 = require("./ChainRec");
var Option_1 = require("./Option");
var function_1 = require("./function");
exports.URI = 'Either';
var Left = /** @class */ (function () {
    function Left(value) {
        this.value = value;
        this._tag = 'Left';
    }
    Left.prototype.map = function (f) {
        return this;
    };
    Left.prototype.ap = function (fab) {
        return (exports.isLeft(fab) ? fab : this);
    };
    Left.prototype.ap_ = function (fb) {
        return fb.ap(this);
    };
    Left.prototype.chain = function (f) {
        return this;
    };
    Left.prototype.bimap = function (f, g) {
        return new Left(f(this.value));
    };
    Left.prototype.alt = function (fy) {
        return fy;
    };
    Left.prototype.extend = function (f) {
        return this;
    };
    Left.prototype.reduce = function (f, b) {
        return b;
    };
    Left.prototype.traverse = function (F) {
        var _this = this;
        return function (f) { return F.of(_this); };
    };
    Left.prototype.fold = function (left, right) {
        return left(this.value);
    };
    /** Returns the value from this `Right` or the given argument if this is a `Left` */
    Left.prototype.getOrElse = function (f) {
        return f(this.value);
    };
    Left.prototype.getOrElseValue = function (value) {
        return value;
    };
    Left.prototype.equals = function (SL, SA) {
        var _this = this;
        return function (fy) { return fy.fold(SL.equals(_this.value), function_1.constFalse); };
    };
    Left.prototype.mapLeft = function (f) {
        return exports.left(f(this.value));
    };
    Left.prototype.toOption = function () {
        return Option_1.none;
    };
    Left.prototype.inspect = function () {
        return this.toString();
    };
    Left.prototype.toString = function () {
        return "left(" + function_1.toString(this.value) + ")";
    };
    return Left;
}());
exports.Left = Left;
var Right = /** @class */ (function () {
    function Right(value) {
        this.value = value;
        this._tag = 'Right';
    }
    Right.prototype.map = function (f) {
        return new Right(f(this.value));
    };
    Right.prototype.ap = function (fab) {
        if (exports.isRight(fab)) {
            return this.map(fab.value);
        }
        return fab;
    };
    Right.prototype.ap_ = function (fb) {
        return fb.ap(this);
    };
    Right.prototype.chain = function (f) {
        return f(this.value);
    };
    Right.prototype.bimap = function (f, g) {
        return new Right(g(this.value));
    };
    Right.prototype.alt = function (fy) {
        return this;
    };
    Right.prototype.extend = function (f) {
        return new Right(f(this));
    };
    Right.prototype.reduce = function (f, b) {
        return f(b, this.value);
    };
    Right.prototype.traverse = function (F) {
        var _this = this;
        return function (f) { return F.map(function (b) { return exports.of(b); }, f(_this.value)); };
    };
    Right.prototype.fold = function (left, right) {
        return right(this.value);
    };
    /** Returns the value from this `Right` or the given argument if this is a `Left` */
    Right.prototype.getOrElse = function (f) {
        return this.value;
    };
    Right.prototype.getOrElseValue = function (value) {
        return this.value;
    };
    Right.prototype.equals = function (SL, SA) {
        var _this = this;
        return function (fy) { return fy.fold(function_1.constFalse, function (y) { return SA.equals(_this.value)(y); }); };
    };
    Right.prototype.mapLeft = function (f) {
        return this;
    };
    Right.prototype.toOption = function () {
        return Option_1.some(this.value);
    };
    Right.prototype.inspect = function () {
        return this.toString();
    };
    Right.prototype.toString = function () {
        return "right(" + function_1.toString(this.value) + ")";
    };
    return Right;
}());
exports.Right = Right;
exports.equals = function (SL, SA) { return function (fx) { return function (fy) {
    return fx.equals(SL, SA)(fy);
}; }; };
exports.getSetoid = function (SL, SA) { return ({
    equals: exports.equals(SL, SA)
}); };
exports.fold = function (left, right, fa) { return fa.fold(left, right); };
/** Returns the value from this `Right` or the given argument if this is a `Left` */
exports.getOrElse = function (f) { return function (fa) { return fa.getOrElse(f); }; };
exports.getOrElseValue = function (value) { return function (fa) { return fa.getOrElseValue(value); }; };
exports.map = function (f, fa) { return fa.map(f); };
exports.of = function (a) { return new Right(a); };
exports.ap = function (fab, fa) { return fa.ap(fab); };
exports.chain = function (f, fa) { return fa.chain(f); };
exports.bimap = function (f, g) { return function (fau) {
    return fau.bimap(f, g);
}; };
exports.alt = function (fx) { return function (fy) { return fx.alt(fy); }; };
exports.extend = function (f, ea) { return ea.extend(f); };
exports.reduce = function (f, b, fa) { return fa.reduce(f, b); };
var Ops = /** @class */ (function () {
    function Ops() {
    }
    Ops.prototype.traverse = function (F) {
        return function (f, ta) { return ta.traverse(F)(f); };
    };
    return Ops;
}());
exports.Ops = Ops;
var ops = new Ops();
exports.traverse = ops.traverse;
exports.chainRec = function (f, a) {
    return ChainRec_1.tailRec(function (e) { return e.fold(function (l) { return exports.right(exports.left(l)); }, function (r) { return r.fold(function (a) { return exports.left(f(a)); }, function (b) { return exports.right(exports.right(b)); }); }); }, f(a));
};
exports.isLeft = function (fa) { return fa._tag === 'Left'; };
exports.isRight = function (fa) { return fa._tag === 'Right'; };
exports.left = function (l) { return new Left(l); };
exports.right = exports.of;
exports.fromPredicate = function (predicate, l) { return function (a) {
    return predicate(a) ? exports.right(a) : exports.left(l(a));
}; };
exports.mapLeft = function (f) { return function (fa) { return fa.mapLeft(f); }; };
/**
 * Takes a default and a `Option` value, if the value is a `Some`, turn it into
 * a `Right`, if the value is a `None` use the provided default as a `Left`
 */
exports.fromOption = function (defaultValue) { return function (fa) {
    return fa.fold(function () { return exports.left(defaultValue); }, function (a) { return exports.right(a); });
}; };
/**
 * Takes a default and a nullable value, if the value is not nully, turn it into
 * a `Right`, if the value is nully use the provided default as a `Left`
 */
exports.fromNullable = function (defaultValue) { return function (a) {
    return a == null ? exports.left(defaultValue) : exports.right(a);
}; };
exports.toOption = function (fa) { return fa.toOption(); };
exports.tryCatch = function (f) {
    try {
        return exports.right(f());
    }
    catch (e) {
        return exports.left(e);
    }
};
exports.getFilterable = function (M) {
    var empty = exports.left(M.empty());
    function partitionMap(f, fa) {
        return fa.fold(function (l) { return ({ left: fa, right: fa }); }, function (a) { return f(a).fold(function (l) { return ({ left: exports.right(l), right: empty }); }, function (a) { return ({ left: empty, right: exports.right(a) }); }); });
    }
    return { URI: exports.URI, map: exports.map, partitionMap: partitionMap };
};
exports.getWitherable = function (monoid) {
    var empty = exports.left(monoid.empty());
    function wilt(applicative) {
        return function (f, ta) {
            return ta.fold(function () { return applicative.of({ left: ta, right: ta }); }, function (a) {
                return applicative.map(function (e) { return e.fold(function (l) { return ({ left: exports.right(l), right: empty }); }, function (r) { return ({ left: empty, right: exports.right(r) }); }); }, f(a));
            });
        };
    }
    var filterable = exports.getFilterable(monoid);
    return __assign({}, filterable, { wilt: wilt, traverse: exports.traverse, reduce: exports.reduce });
};
exports.either = {
    URI: exports.URI,
    map: exports.map,
    of: exports.of,
    ap: exports.ap,
    chain: exports.chain,
    reduce: exports.reduce,
    traverse: exports.traverse,
    bimap: exports.bimap,
    alt: exports.alt,
    extend: exports.extend,
    chainRec: exports.chainRec
};
//# sourceMappingURL=Either.js.map