"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Option_1 = require("./Option");
var function_1 = require("./function");
exports.URI = 'These';
var This = /** @class */ (function () {
    function This(value) {
        this.value = value;
        this._tag = 'This';
    }
    This.prototype.map = function (f) {
        return this;
    };
    This.prototype.ap = function (SL, fab) {
        var _this = this;
        return fab.fold(function () { return fab; }, function () { return _this; }, function (l, _) { return exports.this_(SL.concat(l)(_this.value)); });
    };
    This.prototype.chain = function (SL, f) {
        return this;
    };
    This.prototype.bimap = function (f, g) {
        return exports.this_(f(this.value));
    };
    This.prototype.reduce = function (f, b) {
        return b;
    };
    This.prototype.traverse = function (F) {
        var _this = this;
        return function (f) { return F.of(_this); };
    };
    This.prototype.fold = function (this_, that, both) {
        return this_(this.value);
    };
    This.prototype.equals = function (setoidL, setoidA) {
        var _this = this;
        return function (fy) { return fy.fold(function (l) { return setoidL.equals(l)(_this.value); }, function_1.constFalse, function_1.constFalse); };
    };
    This.prototype.concat = function (SL, SA) {
        var _this = this;
        return function (fy) {
            return fy.fold(function (l) { return exports.this_(SL.concat(_this.value)(l)); }, function (a) { return exports.both(_this.value, a); }, function (l, a) { return exports.both(SL.concat(_this.value)(l), a); });
        };
    };
    This.prototype.inspect = function () {
        return this.toString();
    };
    This.prototype.toString = function () {
        return "this_(" + function_1.toString(this.value) + ")";
    };
    return This;
}());
exports.This = This;
var That = /** @class */ (function () {
    function That(value) {
        this.value = value;
        this._tag = 'That';
    }
    That.prototype.map = function (f) {
        return new That(f(this.value));
    };
    That.prototype.ap = function (SL, fab) {
        var _this = this;
        return fab.fold(function () { return fab; }, function (f) { return exports.that(f(_this.value)); }, function (l, f) { return exports.both(l, f(_this.value)); });
    };
    That.prototype.chain = function (SL, f) {
        return f(this.value);
    };
    That.prototype.bimap = function (f, g) {
        return exports.that(g(this.value));
    };
    That.prototype.reduce = function (f, b) {
        return f(b, this.value);
    };
    That.prototype.traverse = function (F) {
        var _this = this;
        return function (f) { return F.map(function (b) { return exports.that(b); }, f(_this.value)); };
    };
    That.prototype.fold = function (this_, that, both) {
        return that(this.value);
    };
    That.prototype.equals = function (setoidL, setoidA) {
        var _this = this;
        return function (fy) { return fy.fold(function_1.constFalse, function (a) { return setoidA.equals(a)(_this.value); }, function_1.constFalse); };
    };
    That.prototype.concat = function (SL, SA) {
        var _this = this;
        return function (fy) {
            return fy.fold(function (l) { return exports.both(l, _this.value); }, function (a) { return exports.that(SA.concat(_this.value)(a)); }, function (l, a) { return exports.both(l, SA.concat(_this.value)(a)); });
        };
    };
    That.prototype.inspect = function () {
        return this.toString();
    };
    That.prototype.toString = function () {
        return "that(" + function_1.toString(this.value) + ")";
    };
    return That;
}());
exports.That = That;
var Both = /** @class */ (function () {
    function Both(l, a) {
        this.l = l;
        this.a = a;
        this._tag = 'Both';
    }
    Both.prototype.map = function (f) {
        return new Both(this.l, f(this.a));
    };
    Both.prototype.ap = function (SL, fab) {
        var _this = this;
        return fab.fold(function () { return fab; }, function (f) { return exports.both(_this.l, f(_this.a)); }, function (l, f) { return exports.both(SL.concat(l)(_this.l), f(_this.a)); });
    };
    Both.prototype.chain = function (SL, f) {
        var _this = this;
        return f(this.a).fold(function (l) { return exports.this_(SL.concat(_this.l)(l)); }, function (a) { return exports.both(_this.l, a); }, function (l, a) { return exports.both(SL.concat(_this.l)(l), a); });
    };
    Both.prototype.bimap = function (f, g) {
        return exports.both(f(this.l), g(this.a));
    };
    Both.prototype.reduce = function (f, b) {
        return f(b, this.a);
    };
    Both.prototype.traverse = function (F) {
        var _this = this;
        return function (f) { return F.map(function (b) { return exports.both(_this.l, b); }, f(_this.a)); };
    };
    Both.prototype.fold = function (this_, that, both) {
        return both(this.l, this.a);
    };
    Both.prototype.equals = function (setoidL, setoidA) {
        var _this = this;
        return function (fy) { return fy.fold(function_1.constFalse, function_1.constFalse, function (l, a) { return setoidL.equals(l)(_this.l) && setoidA.equals(a)(_this.a); }); };
    };
    Both.prototype.concat = function (SL, SA) {
        var _this = this;
        return function (fy) {
            return fy.fold(function (l) { return exports.both(SL.concat(_this.l)(l), _this.a); }, function (a) { return exports.both(_this.l, SA.concat(_this.a)(a)); }, function (l, a) { return exports.both(SL.concat(_this.l)(l), SA.concat(_this.a)(a)); });
        };
    };
    Both.prototype.inspect = function () {
        return this.toString();
    };
    Both.prototype.toString = function () {
        return "both(" + function_1.toString(this.l) + ", " + function_1.toString(this.a) + ")";
    };
    return Both;
}());
exports.Both = Both;
exports.equals = function (SL, SA) { return function (fx) { return function (fy) {
    return fx.equals(SL, SA)(fy);
}; }; };
exports.getSetoid = function (SL, SA) { return ({
    equals: exports.equals(SL, SA)
}); };
exports.concat = function (SL, SA) { return function (fx) { return function (fy) { return fx.concat(SL, SA)(fy); }; }; };
exports.getSemigroup = function (SL, SA) { return ({
    concat: exports.concat(SL, SA)
}); };
exports.fold = function (this_, that, both, fa) {
    return fa.fold(this_, that, both);
};
exports.map = function (f, fa) { return fa.map(f); };
exports.of = function (a) { return new That(a); };
/** deprecated */
exports.ap = function (SL, fab, fa) {
    return fa.ap(SL, fab);
};
/** deprecated */
exports.chain = function (SL, f, fa) {
    return fa.chain(SL, f);
};
exports.getMonad = function (SL) { return ({
    URI: exports.URI,
    map: exports.map,
    of: exports.of,
    ap: function (fab, fa) { return fa.ap(SL, fab); },
    chain: function (f, fa) { return fa.chain(SL, f); }
}); };
exports.bimap = function (f, g) { return function (fla) { return fla.bimap(f, g); }; };
exports.reduce = function (f, b, fa) { return fa.reduce(f, b); };
var Ops = /** @class */ (function () {
    function Ops() {
    }
    Ops.prototype.traverse = function (F) {
        return function (f, ta) { return ta.traverse(F)(f); };
    };
    return Ops;
}());
exports.Ops = Ops;
var ops = new Ops();
exports.traverse = ops.traverse;
exports.isThis = function (fa) { return fa._tag === 'This'; };
exports.isThat = function (fa) { return fa._tag === 'That'; };
exports.isBoth = function (fa) { return fa._tag === 'Both'; };
exports.this_ = function (l) { return new This(l); };
exports.that = exports.of;
exports.both = function (l, a) { return new Both(l, a); };
exports.fromThese = function (defaultThis, defaultThat) { return function (fa) {
    return fa.fold(function (l) { return [l, defaultThat]; }, function (a) { return [defaultThis, a]; }, function (l, a) { return [l, a]; });
}; };
exports.theseLeft = function (fa) { return fa.fold(function (l) { return Option_1.some(l); }, function () { return Option_1.none; }, function (l, _) { return Option_1.some(l); }); };
exports.theseRight = function (fa) { return fa.fold(function () { return Option_1.none; }, function (a) { return Option_1.some(a); }, function (_, a) { return Option_1.some(a); }); };
exports.these = {
    URI: exports.URI,
    map: exports.map,
    bimap: exports.bimap,
    reduce: exports.reduce,
    traverse: exports.traverse
};
//# sourceMappingURL=These.js.map