import { HKT, HKTS, HKT2S, HKTAs, HKT2As } from './HKT';
import { Applicative } from './Applicative';
import { Lazy } from './function';
import { Monad } from './Monad';
/** Log any value to the console for debugging purposes and then
 * return a value. This will log the value's underlying representation for
 * low-level debugging
 */
export declare const trace: <A>(message: any, out: Lazy<A>) => A;
/** Log any value and return it */
export declare const spy: <A>(a: A) => A;
export declare class Ops {
    /** Log a message to the console for debugging purposes and then return the
     * unit value of the Applicative `F`
     */
    traceA<F extends HKT2S>(F: Applicative<F>): <L>(message: any) => HKT2As<F, L, void>;
    traceA<F extends HKTS>(F: Applicative<F>): (message: any) => HKTAs<F, void>;
    traceA<F>(F: Applicative<F>): (message: any) => HKT<F, void>;
    /** Log any value to the console and return it in `Monad`
     * useful when one has monadic chains
     */
    traceM<F extends HKT2S>(F: Monad<F>): <L, A>(a: A) => HKT2As<F, L, A>;
    traceM<F extends HKTS>(F: Monad<F>): <A>(a: A) => HKTAs<F, A>;
}
export declare const traceA: Ops['traceA'];
export declare const traceM: Ops['traceM'];
