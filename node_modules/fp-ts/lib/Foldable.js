"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Monoid_1 = require("./Monoid");
var Apply_1 = require("./Apply");
var function_1 = require("./function");
exports.getFoldableComposition = function (F, G) {
    return {
        reduce: function (f, b, fga) { return F.reduce(function (b, ga) { return G.reduce(f, b, ga); }, b, fga); }
    };
};
/** A default implementation of `foldMap` using `foldl`. */
exports.foldMap = function (F, M) { return function (f) { return function (fa) {
    return F.reduce(function (acc, x) { return M.concat(acc)(f(x)); }, M.empty(), fa);
}; }; };
exports.fold = function (F, M) { return function (fa) { return exports.foldMap(F, M)(function_1.identity)(fa); }; };
exports.toArray = function (F) { return function (fa) { return exports.foldMap(F, Monoid_1.monoidArray)(function (a) { return [a]; })(fa); }; };
/** A default implementation of `foldr` using `foldMap` */
exports.foldr = function (F) { return function (f) { return function (b) { return function (fa) {
    return exports.foldMap(F, Monoid_1.getEndomorphismMonoid())(f)(fa)(b);
}; }; }; };
/**
 * Fold a data structure, accumulating values in some `Monoid`,
 * combining adjacent elements using the specified separator
 */
exports.intercalate = function (F, M) { return function (sep) { return function (fm) {
    function go(_a, x) {
        var init = _a.init, acc = _a.acc;
        return init ? { init: false, acc: x } : { init: false, acc: M.concat(M.concat(acc)(sep))(x) };
    }
    return F.reduce(go, { init: true, acc: M.empty() }, fm).acc;
}; }; };
var Ops = /** @class */ (function () {
    function Ops() {
    }
    Ops.prototype.traverse_ = function (M, F) {
        return function (f, fa) { return exports.toArray(F)(fa).reduce(function (mu, a) { return Apply_1.applyFirst(M)(mu)(f(a)); }, M.of(undefined)); };
    };
    Ops.prototype.sequence_ = function (M, F) {
        var _this = this;
        return function (fa) { return _this.traverse_(M, F)(function (ma) { return ma; }, fa); };
    };
    return Ops;
}());
exports.Ops = Ops;
var ops = new Ops();
exports.traverse_ = ops.traverse_;
exports.sequence_ = ops.sequence_;
//# sourceMappingURL=Foldable.js.map