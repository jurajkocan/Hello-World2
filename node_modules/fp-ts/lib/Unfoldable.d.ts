import { HKT } from './HKT';
import { Applicative } from './Applicative';
import { Traversable } from './Traversable';
import * as option from './Option';
/** This class identifies data structures which can be _unfolded_,
 * generalizing `unfoldr` on arrays.
 */
export interface Unfoldable<F> {
    readonly URI: F;
    unfoldr: <A, B>(f: (b: B) => option.Option<[A, B]>, b: B) => HKT<F, A>;
}
/** Replicate a value some natural number of times. */
export declare const replicate: <F>(unfoldable: Unfoldable<F>) => (n: number) => <A>(a: A) => HKT<F, A>;
/** Perform an Applicative action `n` times, and accumulate all the results. */
export declare const replicateA: <F, T>(applicative: Applicative<F>, unfoldableTraversable: Unfoldable<T> & Traversable<T>) => (n: number) => <A>(ma: HKT<F, A>) => HKT<F, HKT<T, A>>;
/** The container with no elements - unfolded with zero iterations. */
export declare const none: <F, A>(unfoldable: Unfoldable<F>) => HKT<F, A>;
export declare const singleton: <F>(unfoldable: Unfoldable<F>) => <A>(a: A) => HKT<F, A>;
