import { HKT, HKTS, HKTAs } from './HKT';
import { Traversable, FantasyTraversable } from './Traversable';
import { Filterable, FantasyFilterable } from './Filterable';
import { Applicative } from './Applicative';
import { Either } from './Either';
import { Option } from './Option';
export declare type Wilt<T, L, R> = {
    left: HKT<T, L>;
    right: HKT<T, R>;
};
export declare type Wilt1<T extends HKTS, L, R> = {
    left: HKTAs<T, L>;
    right: HKTAs<T, R>;
};
export interface Witherable<T> extends Traversable<T>, Filterable<T> {
    wilt: <F>(F: Applicative<F>) => <A, L, R>(f: (a: A) => HKT<F, Either<L, R>>, ta: HKT<T, A>) => HKT<F, Wilt<T, L, R>>;
}
export interface FantasyWitherable<T, A> extends FantasyTraversable<T, A>, FantasyFilterable<T, A> {
    wilt: <F>(F: Applicative<F>) => <L, R>(f: (a: A) => HKT<F, Either<L, R>>) => HKT<F, Wilt<T, L, R>>;
}
export declare class Ops {
    /**  A default implementation of `wither` using `wilt` */
    wither<F extends HKTS, T extends HKTS>(F: Applicative<F>, T: Witherable<T>): <A, B>(f: (a: A) => HKT<F, Option<B>>, ta: HKT<T, A>) => HKTAs<F, HKTAs<T, B>>;
    wither<F, T>(F: Applicative<F>, T: Witherable<T>): <A, B>(f: (a: A) => HKT<F, Option<B>>, ta: HKT<T, A>) => HKT<F, HKT<T, B>>;
    /** Partition between `Left` and `Right` values - with effects in `m` */
    wilted<F extends HKTS, T extends HKTS>(F: Applicative<F>, T: Witherable<T>): <L, R>(tm: HKT<T, HKT<F, Either<L, R>>>) => HKTAs<F, Wilt1<T, L, R>>;
    wilted<F, T>(F: Applicative<F>, T: Witherable<T>): <L, R>(tm: HKT<T, HKT<F, Either<L, R>>>) => HKT<F, Wilt<T, L, R>>;
    /** Filter out all the `Nothing` values - with effects in `m` */
    withered<F extends HKTS, T extends HKTS>(F: Applicative<F>, T: Witherable<T>): <A>(tm: HKT<T, HKT<F, Option<A>>>) => HKTAs<F, HKTAs<T, A>>;
    withered<F, T>(F: Applicative<F>, T: Witherable<T>): <A>(tm: HKT<T, HKT<F, Option<A>>>) => HKT<F, HKT<T, A>>;
}
export declare const wither: Ops['wither'];
export declare const wilted: Ops['wilted'];
export declare const withered: Ops['withered'];
