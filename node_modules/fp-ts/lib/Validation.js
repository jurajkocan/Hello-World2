"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var function_1 = require("./function");
var Option_1 = require("./Option");
var Either_1 = require("./Either");
var nonEmptyArray = require("./NonEmptyArray");
exports.URI = 'Validation';
var Failure = /** @class */ (function () {
    function Failure(semigroup, value) {
        this.semigroup = semigroup;
        this.value = value;
        this._tag = 'Failure';
    }
    Failure.prototype.map = function (f) {
        return this;
    };
    Failure.prototype.ap = function (fab) {
        if (exports.isFailure(fab)) {
            return exports.failure(this.semigroup)(this.semigroup.concat(fab.value)(this.value));
        }
        return this;
    };
    Failure.prototype.ap_ = function (fb) {
        return fb.ap(this);
    };
    Failure.prototype.bimap = function (S) {
        var _this = this;
        return function (f, g) { return exports.failure(S)(f(_this.value)); };
    };
    Failure.prototype.alt = function (fy) {
        return fy;
    };
    Failure.prototype.reduce = function (f, b) {
        return b;
    };
    Failure.prototype.traverse = function (F) {
        var _this = this;
        return function (f) { return F.of(_this); };
    };
    Failure.prototype.fold = function (failure, success) {
        return failure(this.value);
    };
    Failure.prototype.equals = function (SL, SA) {
        var _this = this;
        return function (fy) { return fy.fold(SL.equals(_this.value), function_1.constFalse); };
    };
    Failure.prototype.concat = function (fy) {
        var _this = this;
        return fy.fold(function (l) { return exports.failure(_this.semigroup)(_this.semigroup.concat(l)(_this.value)); }, function () { return _this; });
    };
    Failure.prototype.mapFailure = function (S) {
        var _this = this;
        return function (f) { return exports.failure(S)(f(_this.value)); };
    };
    Failure.prototype.swap = function (S) {
        return exports.success(this.value);
    };
    Failure.prototype.toOption = function () {
        return Option_1.none;
    };
    Failure.prototype.toEither = function () {
        return Either_1.left(this.value);
    };
    /** Lift the Invalid value into a NonEmptyArray */
    Failure.prototype.toValidationNea = function () {
        return Option_1.some(exports.failure(nonEmptyArray)(nonEmptyArray.of(this.value)));
    };
    Failure.prototype.inspect = function () {
        return this.toString();
    };
    Failure.prototype.toString = function () {
        return "failure(" + function_1.toString(this.value) + ")";
    };
    return Failure;
}());
exports.Failure = Failure;
var Success = /** @class */ (function () {
    function Success(value) {
        this.value = value;
        this._tag = 'Success';
    }
    Success.prototype.map = function (f) {
        return new Success(f(this.value));
    };
    Success.prototype.ap = function (fab) {
        if (exports.isSuccess(fab)) {
            return this.map(fab.value);
        }
        return fab;
    };
    Success.prototype.ap_ = function (fb) {
        return fb.ap(this);
    };
    Success.prototype.bimap = function (S) {
        var _this = this;
        return function (f, g) { return exports.success(g(_this.value)); };
    };
    Success.prototype.alt = function (fy) {
        return this;
    };
    Success.prototype.reduce = function (f, b) {
        return f(b, this.value);
    };
    Success.prototype.traverse = function (F) {
        var _this = this;
        return function (f) { return F.map(function (b) { return exports.of(b); }, f(_this.value)); };
    };
    Success.prototype.fold = function (failure, success) {
        return success(this.value);
    };
    Success.prototype.equals = function (SL, SA) {
        var _this = this;
        return function (fy) { return fy.fold(function_1.constFalse, function (y) { return SA.equals(_this.value)(y); }); };
    };
    Success.prototype.concat = function (fy) {
        return this;
    };
    Success.prototype.mapFailure = function (S) {
        var _this = this;
        return function (f) { return _this; };
    };
    Success.prototype.swap = function (S) {
        return exports.failure(S)(this.value);
    };
    Success.prototype.toOption = function () {
        return Option_1.some(this.value);
    };
    Success.prototype.toEither = function () {
        return Either_1.right(this.value);
    };
    /** Lift the Invalid value into a NonEmptyArray */
    Success.prototype.toValidationNea = function () {
        return Option_1.none;
    };
    Success.prototype.inspect = function () {
        return this.toString();
    };
    Success.prototype.toString = function () {
        return "success(" + function_1.toString(this.value) + ")";
    };
    return Success;
}());
exports.Success = Success;
exports.equals = function (SL, SA) { return function (fx) { return function (fy) { return fx.equals(SL, SA)(fy); }; }; };
exports.getSetoid = function (SL, SA) { return ({
    equals: exports.equals(SL, SA)
}); };
exports.fold = function (failure, success, fa) {
    return fa.fold(failure, success);
};
exports.map = function (f, fa) { return fa.map(f); };
exports.of = function (a) { return new Success(a); };
exports.ap = function (fab, fa) { return fa.ap(fab); };
exports.bimap = function (S) { return function (f, g) { return function (fa) { return fa.bimap(S)(f, g); }; }; };
exports.alt = function (fx) { return function (fy) { return fx.alt(fy); }; };
exports.reduce = function (f, b, fa) { return fa.reduce(f, b); };
var Ops = /** @class */ (function () {
    function Ops() {
    }
    Ops.prototype.traverse = function (F) {
        return function (f, ta) { return ta.traverse(F)(f); };
    };
    return Ops;
}());
exports.Ops = Ops;
var ops = new Ops();
exports.traverse = ops.traverse;
exports.isFailure = function (fa) { return fa._tag === 'Failure'; };
exports.isSuccess = function (fa) { return fa._tag === 'Success'; };
exports.failure = function (L) { return function (l) { return new Failure(L, l); }; };
exports.success = exports.of;
exports.fromPredicate = function (S) { return function (predicate, f) { return function (a) { return (predicate(a) ? exports.success(a) : exports.failure(S)(f(a))); }; }; };
exports.fromEither = function (S) {
    var f = exports.failure(S);
    return function (e) { return e.fold(function (l) { return f(l); }, function (a) { return exports.success(a); }); };
};
exports.concat = function (fx) { return function (fy) { return fx.concat(fy); }; };
exports.mapFailure = function (S) { return function (f) { return function (fa) {
    return fa.mapFailure(S)(f);
}; }; };
exports.swap = function (S) { return function (fa) { return fa.swap(S); }; };
exports.toOption = function (fa) { return fa.toOption(); };
exports.toEither = function (fa) { return fa.toEither(); };
exports.toValidationNea = function (fa) {
    return fa.toValidationNea();
};
exports.validation = {
    URI: exports.URI,
    ap: exports.ap,
    map: exports.map,
    of: exports.of,
    concat: exports.concat,
    reduce: exports.reduce,
    traverse: exports.traverse,
    alt: exports.alt
};
//# sourceMappingURL=Validation.js.map