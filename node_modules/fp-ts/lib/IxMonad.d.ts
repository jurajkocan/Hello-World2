import { HKT3, HKT3S, HKT3As } from './HKT';
export interface IxMonad<F> {
    readonly URI: F;
    iof: <I, A>(a: A) => HKT3<F, I, I, A>;
    ichain: <I, O, Z, A, B>(f: (a: A) => HKT3<F, O, Z, B>, fa: HKT3<F, I, O, A>) => HKT3<F, I, Z, B>;
}
export interface FantasyIxMonad<F, A, O, I> {
    ichain: <Z, B>(f: (a: A) => HKT3<F, O, Z, B>) => HKT3<F, I, Z, B>;
}
export declare class Ops {
    iapplyFirst<F extends HKT3S>(ixmonad: IxMonad<F>): <I, O, A>(fa: HKT3As<F, I, O, A>) => <Z, B>(fb: HKT3As<F, O, Z, B>) => HKT3As<F, I, Z, A>;
    iapplyFirst<F>(ixmonad: IxMonad<F>): <I, O, A>(fa: HKT3<F, I, O, A>) => <Z, B>(fb: HKT3<F, O, Z, B>) => HKT3<F, I, Z, A>;
    iapplySecond<F extends HKT3S>(ixmonad: IxMonad<F>): <I, O, A>(fa: HKT3As<F, I, O, A>) => <Z, B>(fb: HKT3As<F, O, Z, B>) => HKT3As<F, I, Z, B>;
    iapplySecond<F>(ixmonad: IxMonad<F>): <I, O, A>(fa: HKT3<F, I, O, A>) => <Z, B>(fb: HKT3<F, O, Z, B>) => HKT3<F, I, Z, B>;
}
export declare const iapplyFirst: Ops['iapplyFirst'];
export declare const iapplySecond: Ops['iapplySecond'];
